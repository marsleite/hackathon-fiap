
plugins {
    id 'java'
    id 'org.springframework.boot' version "3.2.3"
    id 'io.spring.dependency-management' version "1.1.4"
    id 'jacoco'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    group = 'com.grupo29'
    version = '0.0.1-SNAPSHOT'

    java {
        sourceCompatibility = '17'
    }
    repositories {
        mavenCentral()
    }
}

subprojects {
    dependencies {
//    implementation("org.springframework.boot:spring-boot-starter-data-jdbc")
//    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
        implementation("org.springframework.boot:spring-boot-starter-web")
        compileOnly("org.projectlombok:lombok")
        runtimeOnly("com.mysql:mysql-connector-j")
        annotationProcessor("org.projectlombok:lombok")
        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    jacocoTestReport {
        additionalSourceDirs.setFrom(files(sourceSets.main.allSource.srcDirs))
        sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
        classDirectories.setFrom(files(sourceSets.main.output))

        reports {
            html.required = true
            xml.required = true
            csv.required = false
        }
    }
}

jacoco {
    toolVersion = '0.8.11'
}

ext {
    excludedClasses = [
        'com/grupo29/techflix/Application*', // Spring Boot application
        'com/grupo29/techflix/model/*', // Spring Boot model
        'com/grupo29/techflix/resource/repository/*', // Spring Boot repository
        'com/grupo29/techflix/beans/*',
        'com/grupo29/techflix/entrypoints/dto/*',
    ]
}

jacocoTestReport {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(subprojects.test)

    additionalSourceDirs.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    sourceDirectories.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    executionData.setFrom(files(subprojects.jacocoTestReport.executionData))
    classDirectories.setFrom(files(subprojects.sourceSets.main.output))

    reports {
        html.required = true
        html.destination file("${buildDir}/reports/jacoco/test")
        xml.required = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        csv.required = false

    }

    onlyIf = { true }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludedClasses)
        }))
    }
}

check.dependsOn clean, jacocoTestReport

tasks {
    bootJar { enabled = false }
    bootRun { enabled = false }
}
